import { NextResponse } from "next/server";
import prisma from "@/app/libs/prismadb";
import getCurrentUser from "@/app/actions/getCurrentUser"; // For authentication/authorization

interface IParams {
  deviceId?: string; // This is the CCMSDevice database ID
}

// POST: Create a new alert for a specific device
export async function POST(
  request: Request,
  { params }: { params: IParams }
) {
  const currentUser = await getCurrentUser();
  if (!currentUser) {
    // Note: In a real system, alerts might be generated by devices themselves,
    // which might use a different auth mechanism (e.g., API key).
    // For now, assuming alerts are created by logged-in portal users.
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { deviceId: cCMSDeviceDBId } = params;
  if (!cCMSDeviceDBId) {
    return NextResponse.json({ error: "Device ID is required" }, { status: 400 });
  }

  try {
    const body = await request.json();
    const { message, level } = body;

    if (!message || !level) {
      return NextResponse.json({ error: "message and level are required for an alert" }, { status: 400 });
    }

    // Validate AlertLevel enum
    const validLevels = ["INFO", "WARNING", "CRITICAL"];
    if (!validLevels.includes(level.toUpperCase())) {
      return NextResponse.json({ error: `Invalid alert level. Must be one of: ${validLevels.join(', ')}` }, { status: 400 });
    }

    // Validate that the device exists
    const device = await prisma.cCMSDevice.findUnique({ where: { id: cCMSDeviceDBId } });
    if (!device) {
      return NextResponse.json({ error: "Device not found" }, { status: 404 });
    }

    const newAlert = await prisma.alert.create({
      data: {
        deviceId: cCMSDeviceDBId,
        message,
        level: level.toUpperCase(), // Ensure level is stored in uppercase as per enum
      },
    });

    // Optionally, update the `alert` field on the CCMSDevice with this latest message
    // This denormalizes the latest alert message for quick access if needed.
    // Consider if this is desired or if fetching from Alert table is always preferred.
    // await prisma.cCMSDevice.update({
    //   where: { id: cCMSDeviceDBId },
    //   data: { alert: message } // Assuming 'alert' field on CCMSDevice is for the latest message
    // });


    return NextResponse.json(newAlert, { status: 201 });
  } catch (error: any) {
    console.error(`Error creating alert for device ${cCMSDeviceDBId}:`, error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// GET: List all alerts for a specific device
export async function GET(
  request: Request,
  { params }: { params: IParams }
) {
  const currentUser = await getCurrentUser();
  if (!currentUser) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { deviceId: cCMSDeviceDBId } = params;
  if (!cCMSDeviceDBId) {
    return NextResponse.json({ error: "Device ID is required" }, { status: 400 });
  }

  try {
    const alerts = await prisma.alert.findMany({
      where: {
        deviceId: cCMSDeviceDBId,
      },
      orderBy: {
        createdAt: 'desc', // Show newest alerts first
      },
    });

    return NextResponse.json(alerts);
  } catch (error) {
    console.error(`Error fetching alerts for device ${cCMSDeviceDBId}:`, error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
