// schema.prisma

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://gurkirat7092:fparkY14bM8iR0Vt@lgin.pbwzfo4.mongodb.net/power"
}

generator client {
  provider = "prisma-client-js"
}

// User model for portal authentication
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  hashedPassword String
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Optional: Link to devices if a user is directly responsible for some
  // devices   CCMSDevice[] @relation("UserDevices")
}

enum UserRole {
  USER
  ADMIN
  MAINTENANCE
}

model CCMSDevice {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  deviceId        String          @unique
  powerRating     String
  voltage         String
  frequency       String
  incomingCurrent String
  ipRating        String
  status          DeviceStatus    @default(ONLINE)
  location        Location
  telemetry       TelemetryData[]
  security        SecurityConfig
  schedules       Schedule[]
  alert           String?         // Latest alert message (optional, can be from Alert model)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Optional: If you want to link devices to a specific user
  // responsibleUser User?    @relation("UserDevices", fields: [responsibleUserId], references: [id])
  // responsibleUserId String? @db.ObjectId

  alerts          Alert[] // History of alerts for this device
}

type Location {
  coordinates     Float[]         // [longitude, latitude]
  address         String
}

type TelemetryData {
  timestamp       DateTime
  voltage         Float[]         // [V1, V2, V3]
  current         Float[]         // [I1, I2, I3]
  power           Float[]         // [P1, P2, P3]
  powerFactor     Float[]         // [PF1, PF2, PF3]
  temperature     Float
}

type SecurityConfig {
  passwordLevel1  String
  passwordLevel2  String
  tamperSensor    Boolean         @default(true)
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  FAULT
}

model Schedule {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  device          CCMSDevice      @relation(fields: [deviceId], references: [id])
  deviceId        String          @db.ObjectId
  startTime       DateTime
  endTime         DateTime
  mode            ScheduleMode    @default(AUTO)
}

enum ScheduleMode {
  AUTO
  MANUAL
  TWILIGHT
}

model Alert {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  device          CCMSDevice      @relation(fields: [deviceId], references: [id])
  deviceId        String          @db.ObjectId
  message         String
  level           AlertLevel
  createdAt       DateTime        @default(now())
}

enum AlertLevel {
  INFO
  WARNING
  CRITICAL
}
